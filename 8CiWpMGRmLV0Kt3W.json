{
  "active": false,
  "connections": {
    "Surveillance Google Drive": {
      "main": [
        [
          {
            "node": "Filtrer Vidéos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filtrer Vidéos": {
      "main": [
        [
          {
            "node": "Set Environnement",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Préparer Renommage": {
      "main": [
        [
          {
            "node": "Update metadata Frameio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download file": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Agent Nomenclature",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Renommer Fichier Drive": {
      "main": [
        [
          {
            "node": "Move file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Frame.io - Demande Upload URL": {
      "main": [
        [
          {
            "node": "Download file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Environnement": {
      "main": [
        [
          {
            "node": "Frame.io - Demande Upload URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update metadata Frameio": {
      "main": [
        [
          {
            "node": "Update asset name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update asset name": {
      "main": [
        [
          {
            "node": "Renommer Fichier Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mapping": {
      "main": [
        [
          {
            "node": "Préparer Renommage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyse Vidéo": {
      "main": [
        [
          {
            "node": "Agent Nomenclature",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stockage : Vidéos à Analyser Manuellement",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "recuperation de l'url de l'asset": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Frame.io - Upload Binaire multiple",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Frame.io - Upload Binaire multiple": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "recuperation de l'url de l'asset",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Analyse Vidéo",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "recuperation de l'url de l'asset",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agent Nomenclature": {
      "main": [
        [
          {
            "node": "Mapping",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-05T14:18:30.440Z",
  "id": "8CiWpMGRmLV0Kt3W",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "(VF) Workflow Intelligent Créatives Facebook Ads",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyX",
              "value": 5,
              "unit": "minutes"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1kCOO67VYTDf2wUHIAsZhK2IlioDLkLXP",
          "mode": "list",
          "cachedResultName": "Vidéo en cours de Traitement",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1kCOO67VYTDf2wUHIAsZhK2IlioDLkLXP"
        },
        "event": "fileCreated",
        "options": {}
      },
      "id": "b55fda04-fe1f-41c8-b221-1287ec5219dc",
      "name": "Surveillance Google Drive",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "position": [
        816,
        224
      ],
      "typeVersion": 1,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "SLFtR95QAltJSXd0",
          "name": "Google Drive account Satyn"
        }
      },
      "notes": "Se déclenche automatiquement quand une nouvelle vidéo est ajoutée au dossier"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "video_filter",
              "leftValue": "={{ $json.mimeType }}",
              "operator": {
                "type": "string",
                "operation": "startsWith",
                "rightType": "any"
              },
              "rightValue": "image/"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "f65bd261-c94b-4a03-a33d-222942f446fe",
      "name": "Filtrer Vidéos",
      "type": "n8n-nodes-base.filter",
      "position": [
        1040,
        224
      ],
      "typeVersion": 2,
      "notes": "Ne traite que les fichiers vidéo"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5e20f2c7-6c48-42a2-a8d4-2a9017dce4d5",
              "name": "ouput",
              "value": "={{ $json.data }}",
              "type": "string"
            },
            {
              "id": "61e1caa1-e568-457f-9ab0-cc8987007884",
              "name": "asset_name",
              "value": "={{ $('Agent Nomenclature').item.json.output.video_title }}",
              "type": "string"
            }
          ]
        },
        "options": {
          "dotNotation": false
        }
      },
      "id": "129fd4bb-342d-4ed6-824e-4357435aa062",
      "name": "Préparer Renommage",
      "type": "n8n-nodes-base.set",
      "position": [
        4016,
        192
      ],
      "typeVersion": 3.4,
      "notes": "Prépare les données pour le renommage et conserve l'extension originale"
    },
    {
      "parameters": {
        "operation": "update",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Filtrer Vidéos').item.json.id }}",
          "mode": "id"
        },
        "newUpdatedFileName": "={{ $('Préparer Renommage').item.json.asset_name }}",
        "options": {}
      },
      "id": "7dc48967-0bd5-42b3-8b4c-958cfce1de3c",
      "name": "Renommer Fichier Drive",
      "type": "n8n-nodes-base.googleDrive",
      "position": [
        4688,
        192
      ],
      "typeVersion": 3,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "SLFtR95QAltJSXd0",
          "name": "Google Drive account Satyn"
        }
      },
      "notes": "Renomme automatiquement le fichier avec la nouvelle nomenclature"
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Filtrer Vidéos').item.json.id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1712,
        224
      ],
      "id": "c9938edd-fc6a-43a1-84e1-74a53b7d232c",
      "name": "Download file",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "SLFtR95QAltJSXd0",
          "name": "Google Drive account Satyn"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        3600,
        336
      ],
      "id": "d815cc5d-5a00-4237-a102-d7590d7bf20d",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "ny4MRPhHqLPpNzoo",
          "name": "Satyn API Gemini "
        }
      }
    },
    {
      "parameters": {
        "operation": "move",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Filtrer Vidéos').item.json.id }}",
          "mode": "id"
        },
        "driveId": {
          "__rl": true,
          "value": "My Drive",
          "mode": "list",
          "cachedResultName": "My Drive",
          "cachedResultUrl": "https://drive.google.com/drive/my-drive"
        },
        "folderId": {
          "__rl": true,
          "value": "1skNBT1fuzxHp4UY_zwJEidVbXtD86gp4",
          "mode": "list",
          "cachedResultName": "Vidéo a analyser manuellement",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1skNBT1fuzxHp4UY_zwJEidVbXtD86gp4"
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        3408,
        320
      ],
      "id": "ec0903a7-d9d9-4b62-a9e0-9defeaf7339e",
      "name": "Stockage : Vidéos à Analyser Manuellement",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "SLFtR95QAltJSXd0",
          "name": "Google Drive account Satyn"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.BASE_URL }}/v4/accounts/{{ $json.ACCOUNT_ID }}/folders/fe168541-6299-4f9c-b937-c04c4d75c497/files/local_upload",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api-version",
              "value": "4.0"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"data\": {\n    \"name\":\"{{ $('Filtrer Vidéos').item.json.name }}\",\n    \"file_size\":{{ $('Filtrer Vidéos').item.json.size }}\n  }\n}",
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1488,
        224
      ],
      "id": "ead91f4a-f99c-4aba-bb97-714c65faa83a",
      "name": "Frame.io - Demande Upload URL",
      "credentials": {
        "oAuth2Api": {
          "id": "UQm6obX5OEHbcJCu",
          "name": "Frame.io Jad"
        }
      }
    },
    {
      "parameters": {
        "content": "## Identifiant (ID)\n- ACCOUNT_ID : a8d19374-1e6a-4bec-b3ee-2535c1e4d51c\n- PROJECT_ID : f5f637ed-1e39-4810-a492-162670ca7b7a\n- WORKSPACE_ID : f5334ef4-7cad-4b16-a085-735a4863c2bf\n- root_folder_id : ab9377e4-3c06-4c31-be4f-e023e18bca83\n\n## Notes\n**Message de succès**\n✅ SATYN - Nomenclature Générée avec Succès\n\n**Message d'échec**\n🚨 ALERTE SATYN - Échec Mapping Nomenclature",
        "height": 336,
        "width": 560
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -16,
        -192
      ],
      "id": "c113ee76-e726-4c8c-91eb-804047060c81",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "url": "https://api.frame.io/v4/me",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api-version",
              "value": "4.0"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        384,
        -32
      ],
      "id": "1b79cd32-ace9-4979-811f-e9175e77e6f7",
      "name": "Set Up Auth",
      "credentials": {
        "oAuth2Api": {
          "id": "UQm6obX5OEHbcJCu",
          "name": "Frame.io Jad"
        },
        "httpBearerAuth": {
          "id": "6LkpzaocFkOKfuRZ",
          "name": "Frameio jad"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c609c7da-7075-4a56-b5c5-17b79978a8fb",
              "name": "BASE_URL",
              "value": "https://api.frame.io",
              "type": "string"
            },
            {
              "id": "f3c62917-85ce-4d40-ba5d-cd11b6210db2",
              "name": "ACCOUNT_ID",
              "value": "a8d19374-1e6a-4bec-b3ee-2535c1e4d51c",
              "type": "string"
            },
            {
              "id": "d63e4aa2-47c5-4457-a104-015c5f054927",
              "name": "WORKSPACE_ID",
              "value": "f5334ef4-7cad-4b16-a085-735a4863c2bf",
              "type": "string"
            },
            {
              "id": "d78d6b08-a3b1-4c55-83ce-d323fafdd916",
              "name": "PROJECT_ID",
              "value": "=f5f637ed-1e39-4810-a492-162670ca7b7a",
              "type": "string"
            },
            {
              "id": "2f005aac-8fa2-4c3d-97c7-c885903f7d9d",
              "name": "ROOT_FOLDER_ID",
              "value": "ab9377e4-3c06-4c31-be4f-e023e18bca83",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1264,
        224
      ],
      "id": "0b604fa1-9581-422e-8c5f-079d56d28b42",
      "name": "Set Environnement"
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "={{ $('Set Environnement').item.json.BASE_URL }}/v4/accounts/{{ $('Set Environnement').item.json.ACCOUNT_ID }}/projects/{{ $('Set Environnement').item.json.PROJECT_ID }}/metadata/values",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api-version",
              "value": "alpha"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"data\": {{ $json.ouput }}\n}",
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4240,
        192
      ],
      "id": "f1d9b3cb-2efa-4781-8318-70112db70016",
      "name": "Update metadata Frameio",
      "credentials": {
        "httpHeaderAuth": {
          "id": "DnFv2GiMeiA9xJdx",
          "name": "Header Auth account"
        },
        "httpBearerAuth": {
          "id": "6LkpzaocFkOKfuRZ",
          "name": "Frameio jad"
        },
        "oAuth2Api": {
          "id": "UQm6obX5OEHbcJCu",
          "name": "Frame.io Jad"
        }
      }
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "=https://api.frame.io/v4/accounts/{{ $('Set Environnement').item.json.ACCOUNT_ID }}/files/{{ $('Frame.io - Demande Upload URL').item.json.data.id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api-version",
              "value": "alpha"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"data\": {\n    \"name\": \"{{ $('Préparer Renommage').item.json.asset_name }}\"\n  }\n}",
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4464,
        192
      ],
      "id": "9f6a578b-8065-4b41-ac8d-02592f823c65",
      "name": "Update asset name",
      "credentials": {
        "oAuth2Api": {
          "id": "UQm6obX5OEHbcJCu",
          "name": "Frame.io Jad"
        }
      }
    },
    {
      "parameters": {
        "operation": "move",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "driveId": {
          "__rl": true,
          "value": "My Drive",
          "mode": "list",
          "cachedResultName": "My Drive",
          "cachedResultUrl": "https://drive.google.com/drive/my-drive"
        },
        "folderId": {
          "__rl": true,
          "value": "1n6RwZmmn79QlDmfxk7cUrFQiM0o4SjZW",
          "mode": "id"
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        4912,
        192
      ],
      "id": "90795509-024b-47ca-985b-65107d0baf17",
      "name": "Move file",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "SLFtR95QAltJSXd0",
          "name": "Google Drive account Satyn"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// It is crucial to have the asset ID you want to update.\n// This ID usually comes from a Google Drive trigger or a previous node (e.g., \"Download file\").\n// In this case, it's provided directly by the user's Frame.io asset data.\nconst assetId = $('Frame.io - Demande Upload URL').first().json.data.id; // Directly from your provided Frame.io asset_id\n\n// Retrieve the structured data from the \"Information Extractor\" node.\n// The relevant data is typically under the 'output' key of the first item.\nconst extractedData = $input.first().json.output;\n\n// Define the mappings for each Frame.io custom field.\n// Includes 'field_definition_id' and 'id' for value options.\n// These IDs are now directly from your provided Frame.io custom field definitions.\n// NOTE: The 'video_title' is a file attribute (asset 'name') and cannot be updated via custom fields.\n// It requires a separate Frame.io API call or a different N8n node to update the asset's name.\nconst fieldMappings = {\n    // \"video_title\" is a file attribute (asset name) and is not part of custom fields.\n    // It should be handled by a separate Frame.io API call for updating asset properties.\n    \"detailed_concept_description\": {\n        field_definition_id: \"17ce0b40-da67-4a89-9488-5b804fd71706\",\n        type: \"text\"\n    },\n    \"main_concept\": { // Maps to \"Concept\" in Frame.io\n        field_definition_id: \"8a0c6275-d8ae-4678-8cf7-854355d60f97\",\n        options: {\n            \"UGC\": \"1455917a-ce07-4118-a882-32017ae720ae\",\n            \"Product focused\": \"f450cb60-9dc5-4643-b5c0-8672276d5edc\",\n            \"Street interview\": \"7563642a-a0c1-4c5f-b8e0-c41933722de4\",\n            \"Podcast\": \"7a800b96-3b97-4db3-a4de-fc76fd1881a1\",\n            \"Founder\": \"596a27d7-b56d-48a5-831c-6fac44ed43fc\",\n            \"NA\": \"a9cf7157-fe5c-41d1-89a5-121b425e98fe\"\n        },\n        type: \"select\"\n    },\n    \"product_presented\": { // Maps to \"Product Presented\" in Frame.io\n        field_definition_id: \"047f7d5c-4926-42d4-8a6f-9b6c367f49bd\",\n        options: {\n            \"SatynCap\": \"19962e15-53f9-423b-a2e5-cf77646067f2\",\n            \"SatynCap V2\": \"f5434cbe-fe2c-42d5-9bdb-fd81a1e03607\",\n            \"Dana-Cap\": \"94acbc9c-3118-4d65-a153-381ceabb1afe\",\n            \"ST Cap Heritage\": \"f95b74ae-1072-42b1-acec-0cea036d548d\",\n            \"Satyn Studio Cap\": \"d26a7a21-998f-404c-acba-301d777fd842\",\n            \"S-Cap\": \"11d85d85-bd08-4816-827e-c49e8271434b\",\n            \"Satyn Bob\": \"9969103d-e100-47dc-ae9c-6eb88549ea2b\",\n            \"S-Daily Cap\": \"5d30985b-6c94-454b-bc4a-212b63c18719\",\n            \"SatynBeanie\": \"f4322d35-b722-47f6-98b8-ab919eefa7e6\",\n            \"SatynCosy\": \"91aed737-6976-4052-b8a8-42530fb89b5a\",\n            \"Skullcap\": \"e66e0d5f-c157-4669-a057-ede4e179b60c\",\n            \"Washed Hoodie\": \"999077a9-dbbf-4c88-877b-8676b439517d\",\n            \"Hoodie Zip V2\": \"f6d1d25b-76b8-4d75-8770-ffec6eeb5c73\",\n            \"Hoodie Zip V1\": \"2272c27e-c812-44f1-b9a3-e44778ec3452\",\n            \"TWWNS Tee\": \"6fdbdc2b-fed3-4ee3-8f37-8bd8712d8d58\",\n            \"Bloom Tee\": \"dc53a06d-5b0f-47b3-bc3f-1c1f53f7d3a8\",\n            \"Other\": \"a1998ed8-6609-416b-bf64-c3fc2888aa5e\",\n            \"None\": \"db7bcfa7-d7c8-4160-ac34-427a9bb5ee4b\"\n        },\n        type: \"select_multi\"\n    },\n    \"ethnicity\": { // Maps to \"Ethnicity\" in Frame.io\n        field_definition_id: \"6fbbd50e-fff8-40e4-bd66-3e6bc6d26f1f\",\n        options: {\n            \"Asian\": \"44e54135-edcf-4b25-bc6c-ea54ce9305e0\",\n            \"Black\": \"4e4f0a5a-7c26-484d-98da-5fe0b8c4577e\",\n            \"Caucasian\": \"16db295a-86fd-4cdc-867b-499662dddd02\",\n            \"Latino/Hispanic\": \"c6f237fb-caa6-4b43-b0f3-c13a7d2d81d5\",\n            \"Mixed\": \"499fd214-1731-4a34-bd7c-e1d68ab8722a\",\n            \"Middle Eastern\": \"dfb1d8c6-2da4-4a0f-8b57-853a8ce347be\",\n            \"Other\": \"fc5d1258-dead-439b-a9fc-8f85fa11fee0\",\n            \"NA\": \"2ba24eae-8d25-4781-8a50-6164b8e75276\",\n            \"White\": \"861f4506-62c8-4508-a10f-ee79173673d7\"\n        },\n        type: \"select\"\n    },\n    \"age_range\": { // Maps to \"Age Range\" in Frame.io\n        field_definition_id: \"ef690846-ba3e-4d63-af4b-151f2920a4e8\",\n        options: {\n            \"13-17\": \"8bdf932d-78a4-4451-8a88-e287b55ed254\",\n            \"18-24\": \"42ae355f-e38e-43a6-ac02-57047191e93f\",\n            \"25-34\": \"a3c36731-c82e-4c52-b453-7e573202d7d9\",\n            \"35-44\": \"8c43060d-e189-4268-869b-5937cbd58492\",\n            \"45-54\": \"448a5172-f590-4a2b-8d60-b28d157244c0\",\n            \"55-64\": \"5678f62c-edf0-4f7e-8b1f-b878f3861beb\",\n            \"65+\": \"af159ccb-61c5-48b4-9565-657998cd8cea\",\n            \"NA\": \"4f734226-e087-426a-aa93-f76a826e662b\"\n        },\n        type: \"select\"\n    },\n    \"gender\": { // Maps to \"Gender\" in Frame.io\n        field_definition_id: \"b44a4eff-85bd-4741-a956-4ddc31d2d6b2\",\n        options: {\n            \"Male\": \"ab68cc23-096c-439e-93c5-0ce493733e38\",\n            \"Female\": \"43667e1c-ee32-496a-87c3-f482732bac76\",\n            \"NA\": \"c4626d45-7bb7-46e5-a53a-a53d9fbecc59\"\n        },\n        type: \"select\"\n    },\n    \"skin_tones\": { // Maps to \"Skin Color\" in Frame.io\n        field_definition_id: \"094c3d52-ae5d-4bd7-afd9-bac21ece6b1f\",\n        options: {\n            \"White\": \"458ba7e2-28aa-4d2d-985c-4bf63c8898f3\",\n            \"Black\": \"2e305500-8461-4c7a-8911-33011c021c6e\",\n            \"Tanned\": \"11887ea9-8e16-46a7-8af9-4723cb6bc831\",\n            \"NA\": \"040c2d25-9f90-4088-8552-89a6428f5109\"\n        },\n        type: \"select_multi\"\n    }\n};\n\nconst valuesToUpdate = [];\n\n// Liste de tous les champs à inclure dans le payload\nconst allFields = Object.keys(fieldMappings);\n\nfor (const fieldName of allFields) {\n    const fieldMapping = fieldMappings[fieldName];\n    const geminiValue = extractedData[fieldName];\n\n    if (!fieldMapping) {\n        console.warn(`[WARNING] Field mapping not found for \"${fieldName}\". Skipping.`);\n        continue;\n    }\n\n    // Gestion des valeurs \"NA\"\n    if (!geminiValue || (typeof geminiValue === 'string' && geminiValue.toLowerCase() === \"na\") || (Array.isArray(geminiValue) && geminiValue.length === 0)) {\n        // Pour les champs multi-select, on envoie un tableau vide\n        if (fieldMapping.type === \"select_multi\") {\n            valuesToUpdate.push({\n                field_definition_id: fieldMapping.field_definition_id,\n                value: []\n            });\n        }\n        // Pour les champs text ou single-select, on ne fait rien\n        continue;\n    }\n\n    if (fieldMapping.type === \"select\") {\n        const optionId = fieldMapping.options[geminiValue];\n        if (optionId) {\n            valuesToUpdate.push({\n                field_definition_id: fieldMapping.field_definition_id,\n                value: [optionId]\n            });\n        } else {\n            console.warn(`[WARNING] Option ID not found for field \"${fieldName}\" with value \"${geminiValue}\". This field will NOT be updated.`);\n        }\n    } else if (fieldMapping.type === \"select_multi\") {\n        let valueArray = [];\n        if (Array.isArray(geminiValue)) {\n            valueArray = geminiValue;\n        } else {\n            // Logique pour gérer les chaînes concaténées\n            valueArray = geminiValue.split(',').map(item => item.trim());\n        }\n        \n        const optionIds = valueArray.map(val => fieldMapping.options[val]).filter(id => id);\n        if (optionIds.length > 0) {\n            valuesToUpdate.push({\n                field_definition_id: fieldMapping.field_definition_id,\n                value: optionIds\n            });\n        } else {\n            // Gérer le cas où des valeurs sont présentes mais invalides\n            console.warn(`[WARNING] No valid Option IDs found for multi-select field \"${fieldName}\" with values \"${geminiValue}\". This field will NOT be updated.`);\n        }\n    } else if (fieldMapping.type === \"text\") {\n        valuesToUpdate.push({\n            field_definition_id: fieldMapping.field_definition_id,\n            value: geminiValue\n        });\n    }\n}\n\n\nconst frameioPayload = {\n    data: {\n        asset_ids: [assetId],\n        values: valuesToUpdate\n    }\n};\n\nreturn [{ json: frameioPayload }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3792,
        192
      ],
      "id": "bcb219b0-c630-471f-bb79-9c00379669d0",
      "name": "Mapping"
    },
    {
      "parameters": {
        "resource": "video",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-pro",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-pro"
        },
        "text": "=**Video Analysis Guide (Footage Review & Tagging)**\n\n**Objective:** Accurately analyze video content to generate structured metadata, facilitating automated footage review and asset tagging.\n\n**Detailed Instructions for the AI:**\n\n1.  **ROLE:** You are a video content analyst specializing in e-commerce raw footage review and metadata generation. Your task is to extract key information from video assets to facilitate efficient tagging and categorization.\n\n2.  **CONTEXT:** You are processing raw video clips for the Satyn.fr brand. These clips will be used for marketing on social media platforms.\n\n3.  **TASK:** Analyze the provided video content and generate a structured JSON output with the following fields:\n\n    ```json\n    {\n      \"video_title\": \"Concise description of the video (max 100 characters)\",\n      \"main_avatar\": {\n        \"gender\": \"Male\" | \"Female\" | \"Non-Binary\" | \"NA\",\n        \"ethnicity\": \"Asian\" | \"Black\" | \"Caucasian\" | \"Latino/Hispanic\" | \"Mixed\" | \"Middle Eastern\" | \"Other\" | \"NA\",\n        \"age_range\": \"13-17 years\" | \"18-24 years\" | \"25-34 years\" | \"35-44 years\" | \"45-54 years\" | \"55-64 years\" | \"65 years and over\" | \"NA\",\n        \"skin_tones\": \"White\" | \"Black\" | \"Tanned\" | \"NA\"\n      },\n      \"main_concept\": \"UGC\" | \"Product focused\" | \"Street interview\" | \"Podcast\" | \"Founder\" | \"NA\",\n      \"product_presented\": [\n        \"Washed hoodie\" | \"Hoodie zip v1\" | \"Hoodie zip v2\" | \"SatynCap\" | \"SatynCap V2\" | \"SatynBeanie\" | \"SatynCosy\" | \"Skullcap\" | \"ST Cap Heritage\" | \"Dana-Cap\" | \"Satyn Studio Cap\" | \"S-Cap\" | \"Satyn Bob\" | \"S-Daily Cap\" | \"TWWNS Tee\" | \"Bloom Tee\" | \"Other\" | \"None\"\n      ],\n      \"detailed_concept_description\": \"Describe in one sentence the specific concept of the video (e.g., 'A person showcases the benefits of the Skullcap beanie in a daily situation.').\"\n    }\n    ```\n\n4.  **RULES & SPECIFICATIONS:**\n    * **`video_title`:** Provide a concise description, a maximum of 10 words and 100 characters.\n    * **`main_avatar`:** Identify the primary person in the video.\n        * **`gender`:** Choose one from `Male`, `Female`, `Non-Binary`, or `NA` if not applicable.\n        * **`ethnicity`:** Choose one from `Asian`, `Black`, `Caucasian`, `Latino/Hispanic`, `Mixed`, `Middle Eastern`, `Other`, or `NA`.\n        * **`age_range`:** Estimate the age range from the provided list, or `NA`.\n        * **`skin_tones`:** This is a **multi-select** field. Identify all relevant skin tones from `White`, `Black`, `Tanned`, or use `NA` if not applicable or multiple tones are not distinguishable.\n    * **`main_concept`:** Categorize the video based on the following definitions:\n        * **UGC:** Any video showing a person using the product naturally.\n        * **Product focused:** The video focuses exclusively on the product itself.\n        * **Street interview:** A person is interviewing someone in a street setting.\n        * **Podcast:** A conversation between two or more people.\n        * **Founder:** The brand owner is speaking about the product, brand, or packing products.\n        * If none of these apply, use `NA`.\n    * **`product_presented`:** This is a **multi-select** field. Identify all Satyn.fr products shown in the video.\n        * **`Washed hoodie`:** Basic 400gsm washed effect hoodie with a small Satyn logo and a satin-lined hood. Colors: green/black/pink/black.\n        * **`Hoodie zip v1`:** 400gsm double-zip hoodie with a central /satyn logo and a satin-lined hood. Colors: black/pink/cyan.\n        * **`Hoodie zip v2`:** 400gsm double-zip hoodie with a small embroidered Satyn logo on the sleeve and a satin-lined hood. Colors: black/pink/cyan.\n        * **`SatynCap`:** Trucker hat with a 3D embroidered “satyn” logo. Colors: pink/black/white/violet/beige-kaki.\n        * **`SatynCap V2`:** Water-repellent trucker hat with a 3D embroidered “Satyn” logo, perforated sides, and a hidden logo under the visor. Colors: Black (tone-on-tone embroidery), Pink (white embroidery + pink satin), White (white embroidery + grey satin).\n        * **`SatynBeanie`:** Basic beanie with a diagonal “satyn” logo. Colors: black (logo grey), grey (logo white), brown (logo light brown/kaki), blue (logo light blue), pink (logo white/light pink).\n        * **`SatynCosy`:** Thick ribbed beanie with a subtle Satyn tag. Color: black (with white satyn).\n        * **`Skullcap`:** Fitted polyester beanie with a satin lining inside. Variants: 1) skull light (reflective logo, stitch logo, 1 black color) 2) skullcap (black, gray, pink, with white embroidered logo).\n        * **`ST Cap Heritage`:** Structured wool-effect cap with houndstooth pattern and an embroidered ST logo. Colors: Beige / Brown / Black (pied-de-poule).\n        * **`Dana-Cap`:** Scarf-style cap with cotton plaid fabric and a butterfly logo. Colors: Blue plaid / Brown plaid.\n        * **`Satyn Studio Cap`:** Minimalist 5-panel cap in olive green technical cotton with a Satyn Studio patch. Color: Olive green.\n        * **`S-Cap`:** Structured cap with an oversized embroidered S on the front and perforated sides. Color: Black.\n        * **`Satyn Bob`:** Structured bucket hat with a satin lining. Colors: Pink / Black / Denim blue (jean).\n        * **`S-Daily Cap`:** Classic low-profile curved cap with a “Satyn Studio” script logo and a satin lining. Colors: Black / Blue / Brown.\n        * **`TWWNS Tee`:** Heavyweight 240gsm or 320gsm oversized tee with “The Whole World Needs Satyn” print on the back. Colors: Black, White.\n        * **`Bloom Tee`:** Heavyweight 320gsm oversized tee with a puff-print logo and tonal bloom graphic. Colors: white, blue, pink, black.\n        * If a product is present but not on this list, use `NA`. If no product is shown, use `NA`.\n    * **`detailed_concept_description`:** Provide a single sentence that concisely describes the core concept or action of the video.",
        "videoUrls": "={{ $json.data.media_links.efficient.download_url }}",
        "options": {}
      },
      "id": "6538d0ee-8c8c-4810-8f77-ded5ec9ae540",
      "name": "Analyse Vidéo",
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "position": [
        3168,
        224
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "ny4MRPhHqLPpNzoo",
          "name": "Satyn API Gemini "
        }
      },
      "onError": "continueErrorOutput",
      "notes": "Gemini analyse le contenu vidéo et extrait les caractéristiques"
    },
    {
      "parameters": {
        "url": "=https://api.frame.io/v4/accounts/{{ $('Set Environnement').item.json.ACCOUNT_ID }}/files/{{ $('Frame.io - Demande Upload URL').item.json.data.id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "include",
              "value": "project,media_links.original, media_links.thumbnail, media_links.video_h264_180,media_links.efficient,media_links.high_quality"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "api-version",
              "value": "4.0"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2608,
        80
      ],
      "id": "a9e23944-853d-417d-a0b1-46a92bbc71dd",
      "name": "recuperation de l'url de l'asset",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "credentials": {
        "oAuth2Api": {
          "id": "UQm6obX5OEHbcJCu",
          "name": "Frame.io Jad"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// ⚙️ Paramètres\nconst binaryProp = 'data'; // Nom du champ binaire dans l'item d'entrée\nconst uploadUrls = $('Frame.io - Demande Upload URL').item.json.data.upload_urls;\n\n// ✅ Étape 1 : Lire le fichier binaire\nconst item = items[0];\nconst binaryData = item.binary?.[binaryProp];\nif (!binaryData) {\n\tthrow new Error(`Fichier binaire manquant dans '${binaryProp}'`);\n}\n\nconst base64 = binaryData.data;\nconst buffer = Buffer.from(base64, 'base64');\n\n// ✅ Étape 2 : Découper le buffer en fonction des tailles des URLs\nlet offset = 0;\nconst parts = [];\n\nfor (let i = 0; i < uploadUrls.length; i++) {\n\tconst size = uploadUrls[i].size;\n\n\t// On découpe les bons octets\n\tconst chunk = buffer.slice(offset, offset + size);\n\n\t// On encode en base64 pour N8N (sera reconverti lors de l'upload)\n\tconst chunkBase64 = chunk.toString('base64');\n\n\tparts.push({\n\t\tjson: { partIndex: i },\n\t\tbinary: {\n\t\t\tpart: {\n\t\t\t\tdata: chunkBase64,\n\t\t\t\tmimeType: binaryData.mimeType,\n\t\t\t\tfileName: `chunk_${i + 1}_${binaryData.fileName}`,\n\t\t\t}\n\t\t}\n\t});\n\n\toffset += size;\n}\n\n// ✅ Étape 3 : Retourner les morceaux comme nouveaux items\nreturn parts;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1936,
        224
      ],
      "id": "a6b30572-6b77-408e-aec3-b927cbe279fb",
      "name": "Code"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "={{ $('Frame.io - Demande Upload URL').item.json.data.upload_urls[$json.partIndex].url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "={{ $('Frame.io - Demande Upload URL').item.json.data.media_type }}"
            },
            {
              "name": "x-amz-acl",
              "value": "private"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "part",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2384,
        320
      ],
      "id": "7744d9ab-a109-4ce8-aa00-8cc6abcba8eb",
      "name": "Frame.io - Upload Binaire multiple",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2160,
        224
      ],
      "id": "b3ec8620-3f71-41b8-8bc9-fa12ab838a3c",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {}
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        2384,
        80
      ],
      "id": "8ff10ad2-a430-448d-95ed-76ef1337241f",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c56a1d3b-6769-4654-880c-d39803ea2b91",
              "leftValue": "={{ $json.data.media_links.efficient.download_url }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2832,
        80
      ],
      "id": "0c01d16b-c9f6-4648-9e40-ffb6244e5541",
      "name": "If"
    },
    {
      "parameters": {
        "amount": 20
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2832,
        320
      ],
      "id": "640f7d6e-0110-407c-ac9b-f054df8b3378",
      "name": "Wait",
      "webhookId": "a534f123-af9a-41b2-bdf1-27a0dd2991e7"
    },
    {
      "parameters": {
        "text": "=Here is the video analysis for footage review: {{ $json.content.parts[0].text }}",
        "attributes": {
          "attributes": [
            {
              "name": "video_title",
              "description": "Concise description of the video (max 100 characters).",
              "required": true
            },
            {
              "name": "gender",
              "description": "Gender of the main avatar. Options: Male, Female, NA.",
              "required": true
            },
            {
              "name": "ethnicity",
              "description": "Ethnicity of the main avatar. Options: Asian, Black, Caucasian, Latino/Hispanic, Mixed, Middle Eastern, Other, NA.",
              "required": true
            },
            {
              "name": "age_range",
              "description": "Age range of the main avatar. Options: 13-17, 18-24, 25-34, 35-44, 45-54, 55-64, 65+, NA.",
              "required": true
            },
            {
              "name": "skin_tones",
              "description": "Skin tone of the main avatar. Options: White, Black, Tanned, NA.",
              "required": true
            },
            {
              "name": "main_concept",
              "description": "Category of the video's main concept. Options: UGC, Product focused, Street interview, Podcast, Founder, NA.",
              "required": true
            },
            {
              "name": "product_presented",
              "description": "List of Satyn.fr products identified in the video. Multi-select field. Options: Washed hoodie, Hoodie zip v1, Hoodie zip v2, SatynCap, SatynCap V2, SatynBeanie, SatynCosy, Skullcap, ST Cap Heritage, Dana-Cap, Satyn Studio Cap, S-Cap, Satyn Bob, S-Daily Cap, TWWNS Tee, Bloom Tee, NA.",
              "required": true
            },
            {
              "name": "detailed_concept_description",
              "description": "One-sentence description of the specific video concept.",
              "required": true
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1.2,
      "position": [
        3408,
        192
      ],
      "id": "c10891d5-5414-4cb0-8ac6-6380ec86d287",
      "name": "Agent Nomenclature"
    }
  ],
  "origin": "n8n",
  "pinData": {},
  "repo": {
    "owner": "abqarimind",
    "name": "n8n-workflow"
  },
  "settings": {
    "executionOrder": "v1",
    "timezone": "Europe/Paris",
    "saveManualExecutions": true,
    "errorWorkflow": ""
  },
  "staticData": {
    "node:Surveillance Google Drive": {
      "lastTimeChecked": "2025-08-01T13:13:50Z"
    }
  },
  "tags": [
    {
      "createdAt": "2025-07-29T12:08:36.284Z",
      "updatedAt": "2025-07-29T12:08:36.284Z",
      "id": "2WfwjU4repQyqKPm",
      "name": "staging"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-08-08T09:51:47.000Z",
  "versionId": "982b4bbc-cb34-4025-b462-da458a279c8c"
}